@page "/"

@using System.Text.Json
@using SaveAndRestoreLayout.Data
@using System.Collections.ObjectModel
@inject NavigationManager uriHelper;
@inject WeatherForecastService ForecastService
@inject IJSRuntime JSRuntime

@if (Forecasts == null) {
    <p><em>Loading...</em></p>
}
else {
    <h2>How to save and restore the grid's layout automatically</h2>
    <div class="mb-3">
        <DxButton Click="ReloadPageButton_Click" Text="Reload page" RenderStyle="ButtonRenderStyle.Secondary" CssClass="button-margins" />
        <DxButton Click="ShowColumnChooserButton_Click" Text="Show column chooser" RenderStyle="ButtonRenderStyle.Secondary" CssClass="show-column-chooser-button button-margins" />
        <DxButton Click="ResetLayoutButton_Click" RenderStyle="ButtonRenderStyle.Secondary" Text="Reset layout" CssClass="button-margins" />
    </div>
    <DxGrid Data="@Forecasts"
        @ref=GridRef
        CssClass="mw-1100"
        PageSizeSelectorVisible="true"
        PageSizeSelectorAllRowsItemVisible="true"
        ColumnResizeMode="GridColumnResizeMode.NextColumn"
        ShowGroupPanel="true"
        ShowFilterRow="true"
        LayoutAutoLoading=Grid_LayoutAutoLoading
        LayoutAutoSaving=Grid_LayoutAutoSaving>
        <Columns>
            <DxGridDataColumn Caption="Date" FieldName="Date" />
            <DxGridDataColumn Caption="Temperature" FieldName="TemperatureF" />
            <DxGridDataColumn Caption="Summary" FieldName="Summary" />
        </Columns>
    </DxGrid>
}

@code {
    const string LocalStorageAutomaticSaveKey = "sampleKey";
    const string LocalStorageItemsKey = "sampleItemsKey";
    WeatherForecast[] Forecasts { get; set; }
    IGrid GridRef { get; set; }
    ObservableCollection<UserLayout> Layouts { get; set; } = new ObservableCollection<UserLayout>();
    UserLayout SelectedLayout { get; set; }

    protected override async Task OnInitializedAsync() {
        Forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
        var json = await GetLocalStorageItemAsync(LocalStorageItemsKey);
        if (!string.IsNullOrEmpty(json))
            Layouts = JsonSerializer.Deserialize<ObservableCollection<UserLayout>>(json);
    }
    async Task Grid_LayoutAutoLoading(GridPersistentLayoutEventArgs e) {
        var json = await GetLocalStorageItemAsync(LocalStorageAutomaticSaveKey);
        if (!string.IsNullOrEmpty(json))
            e.Layout = JsonSerializer.Deserialize<GridPersistentLayout>(json);
    }
    async Task Grid_LayoutAutoSaving(GridPersistentLayoutEventArgs e) {
        await SetLocalStorageItemAsync(LocalStorageAutomaticSaveKey, JsonSerializer.Serialize(e.Layout));
    }
    async Task ResetLayoutButton_Click() {
        await RemoveLocalStorageItemAsync(LocalStorageAutomaticSaveKey);
        await RefreshPageAsync();
    }
    async Task ReloadPageButton_Click() {
        await RefreshPageAsync();
    }
    void ShowColumnChooserButton_Click() {
        GridRef.ShowColumnChooser(".show-column-chooser-button");
    }
    async Task RefreshPageAsync() {
        await JSRuntime.InvokeVoidAsync("location.reload");
    }
    async Task<string> GetLocalStorageItemAsync(string key) {
        try {
            return await JSRuntime.InvokeAsync<string>("localStorage.getItem", key);
        }
        catch {
            // Mute exceptions
            return "";
        }
    }
    async Task SetLocalStorageItemAsync(string key, string value) {
        try {
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", key, value);
        }
        catch {
            // Mute exceptions
        }
    }
    async Task RemoveLocalStorageItemAsync(string key) {
        try {
            await JSRuntime.InvokeVoidAsync("localStorage.removeItem", key);
        }
        catch {
            // Mute exceptions
        }
    }
}