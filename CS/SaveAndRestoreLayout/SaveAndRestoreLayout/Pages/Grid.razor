@page "/"

@using System.Text.Json
@using SaveAndRestoreLayout.Data
@using System.Collections.ObjectModel
@inject NavigationManager uriHelper;
@inject WeatherForecastService ForecastService
@inject IJSRuntime JSRuntime


@if (Forecasts == null) {
    <p><em>Loading...</em></p>
}
else {
    <h2>How to save and restore the grid's layout</h2>
    <DxFormLayout>
        <DxFormLayoutTabPages>
            <DxFormLayoutTabPage Caption="Save layout automatically">
                <div>
                    <DxButton Click="ReloadPage_Click" Text="Reload page" />
                    <DxButton Click="ShowColumnChooser_Click1" Text="Show column chooser" CssClass="show-column-chooser-button1" />

                    <DxGrid Data="@Forecasts"
                        @ref=GridRef1
                        CssClass="mw-1100"
                        PageSizeSelectorVisible="true"
                        PageSizeSelectorAllRowsItemVisible="true"
                        ColumnResizeMode="GridColumnResizeMode.NextColumn"
                        ShowGroupPanel="true" ShowFilterRow="true"
                        LayoutAutoLoading=Grid_LayoutAutoLoading
                        LayoutAutoSaving=Grid_LayoutAutoSaving>
                        <Columns>
                            <DxGridDataColumn Caption="Date" FieldName="Date" />
                            <DxGridDataColumn Caption="Temperature" FieldName="TemperatureF" />
                            <DxGridDataColumn Caption="Summary" FieldName="Summary" />
                        </Columns>
                    </DxGrid>
                </div>
                <div>
                    <DxButton Click="ResetLayoutButton_Click" Text="Reset layout" />
                </div>
            </DxFormLayoutTabPage>
            <DxFormLayoutTabPage Caption="Save layout by API">
                <div class="container">
                    <div class="row">
                        <div class="col-8">
                            <DxButton Click="ShowColumnChooser_Click2" Text="Show column chooser" CssClass="show-column-chooser-button2" />
                            <DxGrid Data="@Forecasts"
                                @ref=GridRef2
                                CssClass="mw-1100"
                                PageSizeSelectorVisible="true"
                                PageSizeSelectorAllRowsItemVisible="true"
                                ColumnResizeMode="GridColumnResizeMode.NextColumn"
                                ShowGroupPanel="true" ShowFilterRow="true">
                                <Columns>
                                    <DxGridDataColumn Caption="Date" FieldName="Date" />
                                    <DxGridDataColumn Caption="Temperature" FieldName="TemperatureF" />
                                    <DxGridDataColumn Caption="Summary" FieldName="Summary" />
                                </Columns>
                            </DxGrid>

                        </div>
                        <div class="col-4">
                            Available layouts:
                            <DxListBox Data="@Layouts" TextFieldName="LayoutKey" @bind-Value="@SelectedLayout" />
                            <DxButton Click="SaveLayout_Click" Text="Save current layout" />
                            @if (SelectedLayout != null) {
                                <DxButton Click="LoadLayout_Click" Text="Load layout" />
                                <DxButton Click="RemoveLayout_Click" Text="Remove layout" />
                            }
                        </div>
                    </div>
                </div>
            </DxFormLayoutTabPage>
        </DxFormLayoutTabPages>
    </DxFormLayout>
}


@code {
    const string LocalStorageAutomaticSaveKey = "sampleKey";
    const string LocalStorageItemsKey = "sampleItemsKey";
    WeatherForecast[] Forecasts { get; set; }
    IGrid GridRef1 { get; set; }
    IGrid GridRef2 { get; set; }
    ObservableCollection<UserLayout> Layouts { get; set; }
    UserLayout SelectedLayout { get; set; }

    protected override async Task OnInitializedAsync() {
        Forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
        var json = await GetLocalStorageItemAsync(LocalStorageItemsKey);
        if (!string.IsNullOrEmpty(json))
            Layouts = JsonSerializer.Deserialize<ObservableCollection<UserLayout>>(json);
    }

    async Task Grid_LayoutAutoLoading(GridPersistentLayoutEventArgs e) {
        var json = await GetLocalStorageItemAsync(LocalStorageAutomaticSaveKey);
        if (!string.IsNullOrEmpty(json))
            e.Layout = JsonSerializer.Deserialize<GridPersistentLayout>(json);
    }
    async Task Grid_LayoutAutoSaving(GridPersistentLayoutEventArgs e) {
        await SetLocalStorageItemAsync(LocalStorageAutomaticSaveKey, JsonSerializer.Serialize(e.Layout));
    }

    async Task ResetLayoutButton_Click() {
        await RemoveLocalStorageItemAsync(LocalStorageAutomaticSaveKey);
        await RefreshPageAsync();
    }    
    async Task ReloadPage_Click() {
        await RefreshPageAsync();
    }
    void ShowColumnChooser_Click1() {
        GridRef1.ShowColumnChooser(".show-column-chooser-button1");
    }

    void ShowColumnChooser_Click2() {
        GridRef2.ShowColumnChooser(".show-column-chooser-button2");
    }
    async void SaveLayout_Click() {
        string newLayoutKey = "";
        newLayoutKey = "Layout " + DateTime.Now.ToString();
        var layout = GridRef2.SaveLayout();
        Layouts.Add(new UserLayout() { LayoutKey = newLayoutKey, Layout = layout });
        await SetLocalStorageItemAsync(LocalStorageItemsKey, JsonSerializer.Serialize(Layouts));
    }
    void LoadLayout_Click() {
        var selectedLayout = SelectedLayout;
        GridPersistentLayout? layout = selectedLayout?.Layout;
        if (layout != null) {
            GridRef2.LoadLayout(layout);
        }
    }
    async void RemoveLayout_Click() {
        var selectedLayout = SelectedLayout;
        Layouts.Remove(selectedLayout);
        await SetLocalStorageItemAsync(LocalStorageItemsKey, JsonSerializer.Serialize(Layouts));
        SelectedLayout = null;
    }

    async Task RefreshPageAsync() {
        await JSRuntime.InvokeVoidAsync("location.reload");
    }
    async Task<string> GetLocalStorageItemAsync(string key) {
        try {
            return await JSRuntime.InvokeAsync<string>("localStorage.getItem", key);
        }
        catch {
            // Mute exceptions
            return "";
        }
    }
    async Task SetLocalStorageItemAsync(string key, string value) {
        try {
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", key, value);
        }
        catch {
            // Mute exceptions
        }
    }
    async Task RemoveLocalStorageItemAsync(string key) {
        try {
            await JSRuntime.InvokeVoidAsync("localStorage.removeItem", key);
        }
        catch {
            // Mute exceptions
        }
    }
}