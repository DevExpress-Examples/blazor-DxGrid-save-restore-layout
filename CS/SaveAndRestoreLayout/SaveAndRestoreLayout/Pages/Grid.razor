@page "/"

@using System.Text.Json
@using SaveAndRestoreLayout.Data
@using System.Collections.ObjectModel
@inject NavigationManager uriHelper;
@inject WeatherForecastService ForecastService
@inject IJSRuntime JSRuntime
@inject UserLayoutManager CurrentLayout


@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else {
    <div class="container">
        <div class="row p-2">
            <h2>How to save and restore the grid's layout</h2>
            <div class="col-10">
                <p>Save layout automatically<button class="btn btn-light" @onclick="@RefreshPage">Reload page</button></p>

                <p><b>For this grid, a column's GroupIndex parameter is excluded from the list of saved column layout settings. Please see the code in the LayoutAutoSaving event for more information.</b></p>

                <button class="btn btn-light show-column-chooser-button1" @onclick="@ShowColumnChooser_Click1">Show column chooser</button>
                <DxGrid Data="@forecasts"
                    @ref=GridRef1
                    CssClass="mw-1100"
                    PageSizeSelectorVisible="true"
                    PageSizeSelectorAllRowsItemVisible="true"
                    ColumnResizeMode="GridColumnResizeMode.NextColumn"
                    ShowGroupPanel="true" ShowFilterRow="true"
                    LayoutAutoLoading=Grid_LayoutAutoLoading
                    LayoutAutoSaving=Grid_LayoutAutoSaving>
                    <Columns>
                        <DxGridDataColumn Caption="Date" FieldName="Date" />
                        <DxGridDataColumn Caption="Temperature" FieldName="TemperatureF" />
                        <DxGridDataColumn Caption="Summary" FieldName="Summary" />
                    </Columns>
                </DxGrid>
            </div>
            <div class="col-2">
                <button class="btn btn-light" @onclick="@(async () => { await ResetLayoutButton_ClickAsync(); })">Reset layout</button>
            </div>
        </div>
        <div class="row p-2">
            <div class="col-10">
                <p>Save layout by a button <button class="btn btn-light" @onclick="@RefreshPage">Reload page</button></p>
                <p><b>For this grid, a column's SortIndex parameter is excluded from the list of saved column layout settings. Please see the code in the SaveLayout method for more information.</b></p>
                <button class="btn btn-light show-column-chooser-button2" @onclick="@ShowColumnChooser_Click2">Show column chooser</button>
                <DxGrid Data="@forecasts"
                    @ref=GridRef2
                    CssClass="mw-1100"
                    PageSizeSelectorVisible="true"
                    PageSizeSelectorAllRowsItemVisible="true"
                    ColumnResizeMode="GridColumnResizeMode.NextColumn"
                    ShowGroupPanel="true" ShowFilterRow="true">
                    <Columns>
                        <DxGridDataColumn Caption="Date" FieldName="Date" />
                        <DxGridDataColumn Caption="Temperature" FieldName="TemperatureF" />
                        <DxGridDataColumn Caption="Summary" FieldName="Summary" />
                    </Columns>
                </DxGrid>

            </div>
            <div class="col-2">
                Available layouts:
                <DxListBox TData="string" TValue="string" Data="@Layouts" @bind-SelectedItems="@SelectedLayout" SelectionMode="ListBoxSelectionMode.Single">
                </DxListBox>
                <div class="p-2">
                    <button class="btn btn-light" @onclick="SaveLayout">Save current layout</button>
                </div>
                @if (SelectedLayout.Count() > 0) {
                    <div class="p-2">
                        <button class="btn btn-light" @onclick="LoadLayout">Load layout</button>
                        <button class="btn btn-light" @onclick="RemoveLayout">Remove layout</button>
                    </div>
                }
            </div>
        </div>
    </div>
}


@code {
    #region Variables
    private WeatherForecast[]? forecasts;
    IGrid GridRef1;
    IGrid GridRef2;
    string LocalStorageKey = "sampleKey";
    private ObservableCollection<string> Layouts = new ObservableCollection<string>();
    private IEnumerable<string> selectedLayout = new List<string>();
    public IEnumerable<string> SelectedLayout {
        get { return selectedLayout; }
        set {
            selectedLayout = value;
            InvokeAsync(StateHasChanged);
        }
    }
    #endregion

    protected override async Task OnInitializedAsync() {
        Layouts = new ObservableCollection<string>(CurrentLayout.GetKeyList());
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
    }
    async Task Grid_LayoutAutoLoading(GridPersistentLayoutEventArgs e) {
        e.Layout = await LoadLayoutFromLocalStorageAsync();
    }
    async Task Grid_LayoutAutoSaving(GridPersistentLayoutEventArgs e) {
        //Excludes the GroupIndex
        var layout = e.Layout with {
                Columns = new GridPersistentLayoutCollection<GridPersistentLayoutColumn>(
                    e.Layout.Columns.Select(i => i with { GroupIndex = null })
                )
        };
        await SaveLayoutToLocalStorageAsync(layout);
    }
    async Task<GridPersistentLayout> LoadLayoutFromLocalStorageAsync() {
        try {
            var json = await JSRuntime.InvokeAsync<string>("localStorage.getItem", LocalStorageKey);
            return JsonSerializer.Deserialize<GridPersistentLayout>(json);
        } catch {
            // Mute exceptions
            return null;
        }
    }
    async Task SaveLayoutToLocalStorageAsync(GridPersistentLayout layout) {
        try {
            var json = JsonSerializer.Serialize(layout);
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", LocalStorageKey, json);
        } catch {
            // Mute exceptions
        }
    }
    async Task RemoveLayoutFromLocalStorageAsync() {
        try {
            await JSRuntime.InvokeVoidAsync("localStorage.removeItem", LocalStorageKey);
        } catch {
            // Mute exceptions
        }
    }
    async Task ResetLayoutButton_ClickAsync() {
        await RemoveLayoutFromLocalStorageAsync();
        await JSRuntime.InvokeVoidAsync("location.reload");
    }
    async void SaveLayout() {
        string newLayoutKey = "";
        newLayoutKey = "Layout " + DateTime.Now.ToString();
        //Excludes the column's SortIndex
        var layout = GridRef2.SaveLayout()  with {
                Columns = new GridPersistentLayoutCollection<GridPersistentLayoutColumn>(
                    GridRef2.SaveLayout().Columns.Select(i => i with { SortIndex = null })
                )
        };
        CurrentLayout.AddLayout(JsonSerializer.Serialize(layout), newLayoutKey.ToString());
        Layouts = new ObservableCollection<string>(CurrentLayout.GetKeyList());
        await InvokeAsync(StateHasChanged);
    }
    void LoadLayout() {
        string selectedLayout = SelectedLayout.ToList()[0];
        string layout = CurrentLayout.GetLayoutByKey(selectedLayout);
        if (!string.IsNullOrEmpty(layout)) {
            var json = JsonSerializer.Deserialize<GridPersistentLayout>(layout);
            GridRef2.LoadLayout(json);
        }
    }
    async void RemoveLayout() {
        string selectedLayout = SelectedLayout.ToList()[0];
        CurrentLayout.RemoveLayout(selectedLayout);
        Layouts = new ObservableCollection<string>(CurrentLayout.GetKeyList());
        SelectedLayout = new List<string>();
        await InvokeAsync(StateHasChanged);
    }
    void RefreshPage() {
       uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
    }
    void ShowColumnChooser_Click1() {
        GridRef1.ShowColumnChooser(".show-column-chooser-button1");
    }
    void ShowColumnChooser_Click2() {
        GridRef2.ShowColumnChooser(".show-column-chooser-button2");
    }
}